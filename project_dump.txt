
================================================================================
File: .\app.py
================================================================================

from flask import Flask, render_template, request, redirect, url_for, abort,flash
import mysql.connector, random, string

import os
from werkzeug.utils import secure_filename 

app = Flask(__name__)

UPLOAD_FOLDER = 'static/posters'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
# MySQL connection
db = mysql.connector.connect(
  host="localhost",
  user="root",
  password="root",
  database="movie_booking"
)
cursor = db.cursor(dictionary=True)
app.secret_key = "supersecretkey"
ADMIN_PASSWORD = "admin123" # simple admin password

# Admin login check (super simple)
def check_admin(password):
  if password != ADMIN_PASSWORD:
    abort(401) # Unauthorized


@app.route('/admin/dashboard')
def admin_dashboard():
  return render_template("admin_dashboard.html")


# Generate random ticket ID
def generate_ticket_id():
  return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

@app.route('/admin/bookings')
def admin_bookings():
  password = request.args.get("password")
  check_admin(password)
  # Updated query to join through showtimes
  cursor.execute("""
    SELECT 
        b.ticket_id, b.username, b.email, 
        m.title, 
        s.seat_no,
        st.show_time
    FROM bookings b
    JOIN seats s ON b.seat_id = s.id
    JOIN showtimes st ON s.showtime_id = st.id
    JOIN movies m ON st.movie_id = m.id
  """)
  bookings = cursor.fetchall()
  return render_template("admin_bookings.html", bookings=bookings)


@app.route('/admin/add_movie', methods=["GET", "POST"])
def add_movie():
    password = request.args.get("password")
    check_admin(password)
    
    poster_url = None

    if request.method == "POST":
        title = request.form["title"]
        
        # Handle Poster Upload
        if 'poster' in request.files:
            file = request.files['poster']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                poster_url = os.path.join(app.config['UPLOAD_FOLDER'], filename).replace('\\', '/') # Store path for database

        # Insert new movie with optional poster URL
        cursor.execute("INSERT INTO movies (title, poster_url) VALUES (%s, %s)", (title, poster_url))
        db.commit()
        
        flash(f"Movie '{title}' added successfully! Now add showtimes.")
        return redirect(f"/admin/add_movie?password=admin123")
        
    return render_template("add_movie.html")

# NEW FEATURE: Edit Movie Details (Name and Poster)
@app.route('/admin/edit_movie', methods=["GET"])
def admin_edit_movie_list():
    password = request.args.get("password")
    check_admin(password)
    
    # Display list of movies to choose from
    cursor.execute("SELECT id, title, poster_url FROM movies ORDER BY title")
    movies = cursor.fetchall()
    
    return render_template("admin_edit_movie_list.html", movies=movies)


@app.route('/admin/edit_movie/<int:movie_id>', methods=["GET", "POST"])
def admin_edit_movie(movie_id):
    password = request.args.get("password")
    check_admin(password)

    cursor.execute("SELECT id, title, poster_url FROM movies WHERE id = %s", (movie_id,))
    movie = cursor.fetchone()
    if not movie:
        abort(404)

    if request.method == "POST":
        new_title = request.form["title"]
        current_poster_url = movie['poster_url']
        
        # Handle new Poster Upload
        if 'poster' in request.files:
            file = request.files['poster']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                current_poster_url = os.path.join(app.config['UPLOAD_FOLDER'], filename).replace('\\', '/')
        
        # Update Database
        cursor.execute("UPDATE movies SET title = %s, poster_url = %s WHERE id = %s", 
                       (new_title, current_poster_url, movie_id))
        db.commit()
        
        flash(f"Movie '{new_title}' updated successfully!")
        return redirect(f"/admin/edit_movie?password=admin123") # Redirect to list view

    return render_template("admin_edit_movie.html", movie=movie)

@app.route('/admin/add_showtime', methods=["GET", "POST"])
def admin_add_showtime():
    password = request.args.get("password")
    check_admin(password)

    cursor.execute("SELECT id, title FROM movies")
    movies = cursor.fetchall()

    if request.method == "POST":
        movie_id = request.form["movie_id"]
        # Using two fields for better user input experience
        show_date = request.form["show_date"] 
        time_only = request.form["show_time_only"] 
        
        # Combine them into a DATETIME string format (YYYY-MM-DD HH:MM:00)
        show_time = f"{show_date} {time_only}:00" 

        # 1. Insert showtime
        cursor.execute("INSERT INTO showtimes (movie_id, show_time) VALUES (%s, %s)", (movie_id, show_time))
        db.commit()
        showtime_id = cursor.lastrowid

        # 2. Generate 25 seats for this specific showtime
        for n in range(25):
            seat_no = chr(65 + n // 5) + str(n % 5 + 1)
            cursor.execute("INSERT INTO seats (showtime_id, seat_no) VALUES (%s,%s)", (showtime_id, seat_no))
        db.commit()

        flash(f"Showtime '{show_time}' added successfully!")
        return redirect(f"/admin/add_showtime?password=admin123")

    return render_template("admin_add_showtime.html", movies=movies)


# NEW FEATURE: Remove Showtime
@app.route('/admin/remove_showtime', methods=["GET", "POST"])
def admin_remove_showtime():
    password = request.args.get("password")
    check_admin(password)

    if request.method == "POST":
        showtime_id = request.form.get("showtime_id")
        
        # Deletion requires specific order: Bookings -> Seats -> Showtime
        # 1. Delete associated bookings
        cursor.execute("DELETE FROM bookings WHERE showtime_id = %s", (showtime_id,))
        # 2. Delete associated seats
        cursor.execute("DELETE FROM seats WHERE showtime_id = %s", (showtime_id,))
        # 3. Delete the showtime itself
        cursor.execute("DELETE FROM showtimes WHERE id = %s", (showtime_id,))
        
        db.commit()
        flash("Showtime and all associated bookings/seats removed successfully!", 'success')
        return redirect(f"/admin/remove_showtime?password=admin123")

    # GET request: Display list of showtimes
    cursor.execute("""
        SELECT st.id, st.show_time, m.title
        FROM showtimes st
        JOIN movies m ON st.movie_id = m.id
        ORDER BY m.title, st.show_time
    """)
    showtimes = cursor.fetchall()
    return render_template("admin_remove_showtime.html", showtimes=showtimes)


# NEW FEATURE: Remove Movie
@app.route('/admin/remove_movie', methods=["GET", "POST"])
def admin_remove_movie():
    password = request.args.get("password")
    check_admin(password)

    if request.method == "POST":
        movie_id = request.form.get("movie_id")
        
        # Fetch showtime IDs associated with the movie
        cursor.execute("SELECT id FROM showtimes WHERE movie_id = %s", (movie_id,))
        showtime_ids = [row['id'] for row in cursor.fetchall()]
        
        # Deletion requires specific order: Bookings -> Seats -> Showtimes -> Movie
        
        if showtime_ids:
            # Prepare SQL placeholders for IN clause
            placeholders = ','.join(['%s'] * len(showtime_ids))
            
            # 1. Delete associated bookings
            cursor.execute(f"DELETE FROM bookings WHERE showtime_id IN ({placeholders})", tuple(showtime_ids))
            
            # 2. Delete associated seats
            cursor.execute(f"DELETE FROM seats WHERE showtime_id IN ({placeholders})", tuple(showtime_ids))
            
            # 3. Delete showtimes
            cursor.execute(f"DELETE FROM showtimes WHERE movie_id = %s", (movie_id,))
            
        # 4. Delete the movie itself
        cursor.execute("DELETE FROM movies WHERE id = %s", (movie_id,))
        
        db.commit()
        flash("Movie, all showtimes, bookings, and seats removed successfully!", 'success')
        return redirect(f"/admin/remove_movie?password=admin123")

    # GET request: Display list of movies
    cursor.execute("SELECT id, title FROM movies ORDER BY title")
    movies = cursor.fetchall()
    return render_template("admin_remove_movie.html", movies=movies)


# NEW FEATURE: Admin Statistics/Reports
@app.route('/admin/stats')
def admin_stats():
    password = request.args.get("password")
    check_admin(password)

    # Total Bookings
    cursor.execute("SELECT COUNT(id) AS total_bookings FROM bookings")
    total_bookings = cursor.fetchone()['total_bookings']

    # Total Movies
    cursor.execute("SELECT COUNT(id) AS total_movies FROM movies")
    total_movies = cursor.fetchone()['total_movies']
    
    # Most Popular Showtime (By number of bookings)
    cursor.execute("""
        SELECT 
            m.title, st.show_time, COUNT(b.id) AS booking_count
        FROM bookings b
        JOIN showtimes st ON b.showtime_id = st.id
        JOIN movies m ON st.movie_id = m.id
        GROUP BY st.id, st.show_time, m.title
        ORDER BY booking_count DESC
        LIMIT 5
    """)
    top_showtimes = cursor.fetchall()
    
    # Unbooked Seats (Total seats vs Total booked)
    cursor.execute("SELECT COUNT(id) AS total_seats FROM seats")
    total_seats = cursor.fetchone()['total_seats']
    
    cursor.execute("SELECT COUNT(id) AS booked_seats FROM seats WHERE is_booked = TRUE")
    booked_seats = cursor.fetchone()['booked_seats']
    
    unbooked_seats = total_seats - booked_seats


    stats = {
        'total_bookings': total_bookings,
        'total_movies': total_movies,
        'unbooked_seats': unbooked_seats,
        'top_showtimes': top_showtimes
    }

    return render_template("admin_stats.html", stats=stats)


@app.route('/', methods=["GET", "POST"])
def home():
  if request.method == "POST" and "admin_password" in request.form:
    password = request.form["admin_password"]
    if password == ADMIN_PASSWORD:
      return redirect(url_for("admin_dashboard"))
    else:
      flash("Incorrect admin password!")
      return redirect(url_for("home"))

  cursor.execute("SELECT * FROM movies")
  movies = cursor.fetchall()
  return render_template("index.html", movies=movies)

@app.route('/timings/<int:movie_id>')
def show_timings(movie_id):
    cursor.execute("SELECT title FROM movies WHERE id=%s", (movie_id,))
    movie = cursor.fetchone()
    if not movie:
        abort(404)

    cursor.execute("SELECT id, show_time FROM showtimes WHERE movie_id=%s ORDER BY show_time", (movie_id,))
    showtimes = cursor.fetchall()

    return render_template("timings.html", movie=movie, showtimes=showtimes)


@app.route('/seats/<int:showtime_id>')
def seats(showtime_id):
  cursor.execute("""
      SELECT st.id, st.show_time, m.title 
      FROM showtimes st
      JOIN movies m ON st.movie_id = m.id
      WHERE st.id=%s
  """, (showtime_id,))
  showtime_data = cursor.fetchone()
  
  if not showtime_data:
      abort(404)
      
  cursor.execute("SELECT * FROM seats WHERE showtime_id=%s ORDER BY seat_no", (showtime_id,))
  seats = cursor.fetchall()
  
  return render_template("seats.html", showtime=showtime_data, seats=seats)

@app.route('/book/<int:showtime_id>/<int:seat_id>', methods=["GET", "POST"])
def book(showtime_id, seat_id):
  cursor.execute("SELECT * FROM seats WHERE id=%s AND showtime_id=%s", (seat_id, showtime_id))
  seat = cursor.fetchone()
  
  if not seat:
      abort(404)

  if seat["is_booked"]:
    return "Seat already booked!"

  cursor.execute("""
      SELECT st.id AS showtime_id, st.show_time, m.title, m.id AS movie_id
      FROM showtimes st
      JOIN movies m ON st.movie_id = m.id
      WHERE st.id=%s
  """, (showtime_id,))
  showtime_data = cursor.fetchone() 

  if request.method == "POST":
    username = request.form["username"]
    email = request.form["email"]
    ticket_id = generate_ticket_id()

    cursor.execute("UPDATE seats SET is_booked=TRUE WHERE id=%s", (seat_id,))
    
    cursor.execute("INSERT INTO bookings (ticket_id, username, email, showtime_id, seat_id) VALUES (%s,%s,%s,%s,%s)",
             (ticket_id, username, email, showtime_id, seat_id))
    db.commit()

    return redirect(url_for("ticket", ticket_id=ticket_id))

  return render_template("book.html", movie=showtime_data, seat=seat)

@app.route('/ticket/<ticket_id>')
def ticket(ticket_id):
  cursor.execute("""
           SELECT 
               b.ticket_id, b.username, b.email, 
               m.title, 
               s.seat_no,
               st.show_time
           FROM bookings b
           JOIN seats s ON b.seat_id=s.id
           JOIN showtimes st ON s.showtime_id=st.id
           JOIN movies m ON st.movie_id=m.id
           WHERE b.ticket_id=%s
         """, (ticket_id,))
  booking = cursor.fetchone()
  return render_template("ticket.html", booking=booking)

if __name__ == "__main__":
  app.run(debug=True)


================================================================================
File: .\dump_project.py
================================================================================

import os

# Set your project root (current folder)
project_root = "."

# Output file
output_file = "project_dump.txt"

# File extensions to include when dumping all files
include_exts = [".py", ".html", ".css", ".js", ".json", ".txt", ".md"]

# 🔧 If you want only specific files, list them here by name
# Example: only_files = ["views.py", "urls.py", "login.html"]
only_files = []   # put filenames here

with open(output_file, "w", encoding="utf-8") as outfile:
    for root, dirs, files in os.walk(project_root):
        if "venv" in dirs:
            dirs.remove("venv")
        if "__pycache__" in dirs:
            dirs.remove("__pycache__")

        for file in files:
            # ✅ If only_files is set, include only those filenames
            if only_files and file not in only_files:
                continue

            # Otherwise filter by extension
            if not only_files and not any(file.endswith(ext) for ext in include_exts):
                continue

            filepath = os.path.join(root, file)
            try:
                with open(filepath, "r", encoding="utf-8") as infile:
                    outfile.write(f"\n{'='*80}\n")
                    outfile.write(f"File: {filepath}\n")
                    outfile.write(f"{'='*80}\n\n")
                    outfile.write(infile.read())
                    outfile.write("\n\n")
            except Exception as e:
                outfile.write(f"\n[Could not read {filepath}: {e}]\n")

print(f"✅ File contents saved to {output_file}")
print("ℹ️  Cleared only_files list after writing.")



================================================================================
File: .\project_dump.txt
================================================================================


================================================================================
File: .\app.py
================================================================================

from flask import Flask, render_template, request, redirect, url_for, abort,flash
import mysql.connector, random, string

import os
from werkzeug.utils import secure_filename 

app = Flask(__name__)

UPLOAD_FOLDER = 'static/posters'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
# MySQL connection
db = mysql.connector.connect(
  host="localhost",
  user="root",
  password="root",
  database="movie_booking"
)
cursor = db.cursor(dictionary=True)
app.secret_key = "supersecretkey"
ADMIN_PASSWORD = "admin123" # simple admin password

# Admin login check (super simple)
def check_admin(password):
  if password != ADMIN_PASSWORD:
    abort(401) # Unauthorized


@app.route('/admin/dashboard')
def admin_dashboard():
  return render_template("admin_dashboard.html")


# Generate random ticket ID
def generate_ticket_id():
  return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

@app.route('/admin/bookings')
def admin_bookings():
  password = request.args.get("password")
  check_admin(password)
  # Updated query to join through showtimes
  cursor.execute("""
    SELECT 
        b.ticket_id, b.username, b.email, 
        m.title, 
        s.seat_no,
        st.show_time
    FROM bookings b
    JOIN seats s ON b.seat_id = s.id
    JOIN showtimes st ON s.showtime_id = st.id
    JOIN movies m ON st.movie_id = m.id
  """)
  bookings = cursor.fetchall()
  return render_template("admin_bookings.html", bookings=bookings)


@app.route('/admin/add_movie', methods=["GET", "POST"])
def add_movie():
    password = request.args.get("password")
    check_admin(password)
    
    poster_url = None

    if request.method == "POST":
        title = request.form["title"]
        
        # Handle Poster Upload
        if 'poster' in request.files:
            file = request.files['poster']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                poster_url = os.path.join(app.config['UPLOAD_FOLDER'], filename).replace('\\', '/') # Store path for database

        # Insert new movie with optional poster URL
        cursor.execute("INSERT INTO movies (title, poster_url) VALUES (%s, %s)", (title, poster_url))
        db.commit()
        
        flash(f"Movie '{title}' added successfully! Now add showtimes.")
        return redirect(f"/admin/add_movie?password=admin123")
        
    return render_template("add_movie.html")

# NEW FEATURE: Edit Movie Details (Name and Poster)
@app.route('/admin/edit_movie', methods=["GET"])
def admin_edit_movie_list():
    password = request.args.get("password")
    check_admin(password)
    
    # Display list of movies to choose from
    cursor.execute("SELECT id, title, poster_url FROM movies ORDER BY title")
    movies = cursor.fetchall()
    
    return render_template("admin_edit_movie_list.html", movies=movies)


@app.route('/admin/edit_movie/<int:movie_id>', methods=["GET", "POST"])
def admin_edit_movie(movie_id):
    password = request.args.get("password")
    check_admin(password)

    cursor.execute("SELECT id, title, poster_url FROM movies WHERE id = %s", (movie_id,))
    movie = cursor.fetchone()
    if not movie:
        abort(404)

    if request.method == "POST":
        new_title = request.form["title"]
        current_poster_url = movie['poster_url']
        
        # Handle new Poster Upload
        if 'poster' in request.files:
            file = request.files['poster']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                file.save(file_path)
                current_poster_url = os.path.join(app.config['UPLOAD_FOLDER'], filename).replace('\\', '/')
        
        # Update Database
        cursor.execute("UPDATE movies SET title = %s, poster_url = %s WHERE id = %s", 
                       (new_title, current_poster_url, movie_id))
        db.commit()
        
        flash(f"Movie '{new_title}' updated successfully!")
        return redirect(f"/admin/edit_movie?password=admin123") # Redirect to list view

    return render_template("admin_edit_movie.html", movie=movie)

@app.route('/admin/add_showtime', methods=["GET", "POST"])
def admin_add_showtime():
    password = request.args.get("password")
    check_admin(password)

    cursor.execute("SELECT id, title FROM movies")
    movies = cursor.fetchall()

    if request.method == "POST":
        movie_id = request.form["movie_id"]
        # Using two fields for better user input experience
        show_date = request.form["show_date"] 
        time_only = request.form["show_time_only"] 
        
        # Combine them into a DATETIME string format (YYYY-MM-DD HH:MM:00)
        show_time = f"{show_date} {time_only}:00" 

        # 1. Insert showtime
        cursor.execute("INSERT INTO showtimes (movie_id, show_time) VALUES (%s, %s)", (movie_id, show_time))
        db.commit()
        showtime_id = cursor.lastrowid

        # 2. Generate 25 seats for this specific showtime
        for n in range(25):
            seat_no = chr(65 + n // 5) + str(n % 5 + 1)
            cursor.execute("INSERT INTO seats (showtime_id, seat_no) VALUES (%s,%s)", (showtime_id, seat_no))
        db.commit()

        flash(f"Showtime '{show_time}' added successfully!")
        return redirect(f"/admin/add_showtime?password=admin123")

    return render_template("admin_add_showtime.html", movies=movies)


# NEW FEATURE: Remove Showtime
@app.route('/admin/remove_showtime', methods=["GET", "POST"])
def admin_remove_showtime():
    password = request.args.get("password")
    check_admin(password)

    if request.method == "POST":
        showtime_id = request.form.get("showtime_id")
        
        # Deletion requires specific order: Bookings -> Seats -> Showtime
        # 1. Delete associated bookings
        cursor.execute("DELETE FROM bookings WHERE showtime_id = %s", (showtime_id,))
        # 2. Delete associated seats
        cursor.execute("DELETE FROM seats WHERE showtime_id = %s", (showtime_id,))
        # 3. Delete the showtime itself
        cursor.execute("DELETE FROM showtimes WHERE id = %s", (showtime_id,))
        
        db.commit()
        flash("Showtime and all associated bookings/seats removed successfully!", 'success')
        return redirect(f"/admin/remove_showtime?password=admin123")

    # GET request: Display list of showtimes
    cursor.execute("""
        SELECT st.id, st.show_time, m.title
        FROM showtimes st
        JOIN movies m ON st.movie_id = m.id
        ORDER BY m.title, st.show_time
    """)
    showtimes = cursor.fetchall()
    return render_template("admin_remove_showtime.html", showtimes=showtimes)


# NEW FEATURE: Remove Movie
@app.route('/admin/remove_movie', methods=["GET", "POST"])
def admin_remove_movie():
    password = request.args.get("password")
    check_admin(password)

    if request.method == "POST":
        movie_id = request.form.get("movie_id")
        
        # Fetch showtime IDs associated with the movie
        cursor.execute("SELECT id FROM showtimes WHERE movie_id = %s", (movie_id,))
        showtime_ids = [row['id'] for row in cursor.fetchall()]
        
        # Deletion requires specific order: Bookings -> Seats -> Showtimes -> Movie
        
        if showtime_ids:
            # Prepare SQL placeholders for IN clause
            placeholders = ','.join(['%s'] * len(showtime_ids))
            
            # 1. Delete associated bookings
            cursor.execute(f"DELETE FROM bookings WHERE showtime_id IN ({placeholders})", tuple(showtime_ids))
            
            # 2. Delete associated seats
            cursor.execute(f"DELETE FROM seats WHERE showtime_id IN ({placeholders})", tuple(showtime_ids))
            
            # 3. Delete showtimes
            cursor.execute(f"DELETE FROM showtimes WHERE movie_id = %s", (movie_id,))
            
        # 4. Delete the movie itself
        cursor.execute("DELETE FROM movies WHERE id = %s", (movie_id,))
        
        db.commit()
        flash("Movie, all showtimes, bookings, and seats removed successfully!", 'success')
        return redirect(f"/admin/remove_movie?password=admin123")

    # GET request: Display list of movies
    cursor.execute("SELECT id, title FROM movies ORDER BY title")
    movies = cursor.fetchall()
    return render_template("admin_remove_movie.html", movies=movies)


# NEW FEATURE: Admin Statistics/Reports
@app.route('/admin/stats')
def admin_stats():
    password = request.args.get("password")
    check_admin(password)

    # Total Bookings
    cursor.execute("SELECT COUNT(id) AS total_bookings FROM bookings")
    total_bookings = cursor.fetchone()['total_bookings']

    # Total Movies
    cursor.execute("SELECT COUNT(id) AS total_movies FROM movies")
    total_movies = cursor.fetchone()['total_movies']
    
    # Most Popular Showtime (By number of bookings)
    cursor.execute("""
        SELECT 
            m.title, st.show_time, COUNT(b.id) AS booking_count
        FROM bookings b
        JOIN showtimes st ON b.showtime_id = st.id
        JOIN movies m ON st.movie_id = m.id
        GROUP BY st.id, st.show_time, m.title
        ORDER BY booking_count DESC
        LIMIT 5
    """)
    top_showtimes = cursor.fetchall()
    
    # Unbooked Seats (Total seats vs Total booked)
    cursor.execute("SELECT COUNT(id) AS total_seats FROM seats")
    total_seats = cursor.fetchone()['total_seats']
    
    cursor.execute("SELECT COUNT(id) AS booked_seats FROM seats WHERE is_booked = TRUE")
    booked_seats = cursor.fetchone()['booked_seats']
    
    unbooked_seats = total_seats - booked_seats


    stats = {
        'total_bookings': total_bookings,
        'total_movies': total_movies,
        'unbooked_seats': unbooked_seats,
        'top_showtimes': top_showtimes
    }

    return render_template("admin_stats.html", stats=stats)


@app.route('/', methods=["GET", "POST"])
def home():
  if request.method == "POST" and "admin_password" in request.form:
    password = request.form["admin_password"]
    if password == ADMIN_PASSWORD:
      return redirect(url_for("admin_dashboard"))
    else:
      flash("Incorrect admin password!")
      return redirect(url_for("home"))

  cursor.execute("SELECT * FROM movies")
  movies = cursor.fetchall()
  return render_template("index.html", movies=movies)

@app.route('/timings/<int:movie_id>')
def show_timings(movie_id):
    cursor.execute("SELECT title FROM movies WHERE id=%s", (movie_id,))
    movie = cursor.fetchone()
    if not movie:
        abort(404)

    cursor.execute("SELECT id, show_time FROM showtimes WHERE movie_id=%s ORDER BY show_time", (movie_id,))
    showtimes = cursor.fetchall()

    return render_template("timings.html", movie=movie, showtimes=showtimes)


@app.route('/seats/<int:showtime_id>')
def seats(showtime_id):
  cursor.execute("""
      SELECT st.id, st.show_time, m.title 
      FROM showtimes st
      JOIN movies m ON st.movie_id = m.id
      WHERE st.id=%s
  """, (showtime_id,))
  showtime_data = cursor.fetchone()
  
  if not showtime_data:
      abort(404)
      
  cursor.execute("SELECT * FROM seats WHERE showtime_id=%s ORDER BY seat_no", (showtime_id,))
  seats = cursor.fetchall()
  
  return render_template("seats.html", showtime=showtime_data, seats=seats)

@app.route('/book/<int:showtime_id>/<int:seat_id>', methods=["GET", "POST"])
def book(showtime_id, seat_id):
  cursor.execute("SELECT * FROM seats WHERE id=%s AND showtime_id=%s", (seat_id, showtime_id))
  seat = cursor.fetchone()
  
  if not seat:
      abort(404)

  if seat["is_booked"]:
    return "Seat already booked!"

  cursor.execute("""
      SELECT st.id AS showtime_id, st.show_time, m.title, m.id AS movie_id
      FROM showtimes st
      JOIN movies m ON st.movie_id = m.id
      WHERE st.id=%s
  """, (showtime_id,))
  showtime_data = cursor.fetchone() 

  if request.method == "POST":
    username = request.form["username"]
    email = request.form["email"]
    ticket_id = generate_ticket_id()

    cursor.execute("UPDATE seats SET is_booked=TRUE WHERE id=%s", (seat_id,))
    
    cursor.execute("INSERT INTO bookings (ticket_id, username, email, showtime_id, seat_id) VALUES (%s,%s,%s,%s,%s)",
             (ticket_id, username, email, showtime_id, seat_id))
    db.commit()

    return redirect(url_for("ticket", ticket_id=ticket_id))

  return render_template("book.html", movie=showtime_data, seat=seat)

@app.route('/ticket/<ticket_id>')
def ticket(ticket_id):
  cursor.execute("""
           SELECT 
               b.ticket_id, b.username, b.email, 
               m.title, 
               s.seat_no,
               st.show_time
           FROM bookings b
           JOIN seats s ON b.seat_id=s.id
           JOIN showtimes st ON s.showtime_id=st.id
           JOIN movies m ON st.movie_id=m.id
           WHERE b.ticket_id=%s
         """, (ticket_id,))
  booking = cursor.fetchone()
  return render_template("ticket.html", booking=booking)

if __name__ == "__main__":
  app.run(debug=True)


================================================================================
File: .\requirements.txt
================================================================================

blinker==1.9.0
click==8.3.0
colorama==0.4.6
Flask==3.1.2
itsdangerous==2.2.0
Jinja2==3.1.6
MarkupSafe==3.0.3
mysql-connector-python==9.4.0
Werkzeug==3.1.3



================================================================================
File: .\static\style.css
================================================================================

:root {
    /* Light Mode Defaults */
    --background-color: #f4f4f9;
    --text-color: #333;
    --header-color: #0056b3;
    --link-color: #007bff;
    --card-background: #ffffff;
    --border-color: #ddd;
    --admin-separator: #ccc;
    --button-primary: #007bff;
    --button-hover: #0056b3;
    --input-background: #ffffff;
    --table-header-bg: #0056b3;
    --flash-bg: #fff3cd;
    --flash-text: #856404;
}

.dark-mode {
    /* Dark Mode Overrides */
    --background-color: #000000;
    --text-color: #e0e0e0;
    --header-color: #ffffff;
    --link-color: hsl(0, 100%, 60%);
    --card-background: #2c2c2c;
    --border-color: #444444;
    --admin-separator: #555;
    --button-primary: #a40000;
    --button-hover: #660000;
    --input-background: #333333;
    --table-header-bg: #444444;
    --flash-bg: #401f4c;
    --flash-text: #bb86fc;
}

body {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 0;
    background-color: var(--background-color);
    color: var(--text-color);
    transition: background-color 0.3s, color 0.3s;
}

h1, h2 {
    color: var(--header-color);
}

a {
    color: var(--link-color);
    text-decoration: none;
    transition: color 0.3s;
}

a:hover {
    text-decoration: underline;
}

table {
    border-collapse: collapse;
    width: 100%;
    margin-top: 20px;
}

th, td {
    border: 1px solid var(--border-color);
    padding: 8px;
    text-align: left;
}

th {
    background-color: var(--table-header-bg);
    color: white;
}

form {
    margin-top: 15px;
    padding: 10px;
    border: 1px solid var(--admin-separator);
    border-radius: 5px;
    max-width: 400px;
    background-color: var(--card-background);
}

input[type="text"], input[type="password"], input[type="email"], 
input[type="date"], input[type="time"], select {
    width: 100%;
    padding: 8px;
    margin: 5px 0 10px 0;
    display: inline-block;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    box-sizing: border-box;
    background-color: var(--input-background);
    color: var(--text-color);
}

button {
    background-color: var(--button-primary);
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: var(--button-hover);
}

/* Flash Messages */
.flash-message {
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
    background-color: var(--flash-bg);
    color: var(--flash-text);
    border: 1px solid var(--link-color);
}

/* Movie Card */
.movie-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); 
    gap: 20px;
    padding: 20px 0;
}

.movie-card {
    background-color: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s;
    text-align: center;
}

.movie-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
}

.poster-link {
    display: block;
    text-decoration: none;
    color: inherit;
}

.poster-placeholder {
    width: 100%;
    height: 300px;
    background-color: #333; /* Light mode default background */
    display: flex;
    justify-content: center;
    align-items: center;
    color: #f4f4f9;
    font-size: 14px;
    font-weight: bold;
    cursor: pointer;
}

.dark-mode .poster-placeholder {
    background-color: #000; 
    color: #90caf9;
}

.poster-placeholder img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.movie-info {
    padding: 10px 5px;
}

.movie-info h3 {
    margin: 0;
    font-size: 1.1em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--header-color);
}

.admin-section {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid var(--admin-separator);
}

/* Seat specific styles */
.seat { 
    display: inline-block; 
    width: 40px; 
    height: 40px; 
    margin: 5px; 
    text-align: center; 
    line-height: 40px; 
    border: 1px solid var(--border-color); 
    border-radius: 5px;
    font-weight: bold;
}
.booked { 
    background-color: #cf6679; /* Reddish for booked */
    color: var(--text-color); 
    cursor: not-allowed; 
}
.available { 
    background-color: #03dac6; /* Cyan/Teal for available */
    color: var(--background-color); 
}
.available a {
    color: inherit;
    display: block;
    text-decoration: none;
}


================================================================================
File: .\static\theme_toggle.js
================================================================================


const STORAGE_KEY = 'themePreference';

function applyTheme(theme) {
    if (theme === 'dark') {
        document.body.classList.add('dark-mode');
        // Update button text if needed, though simple 'Toggle' works fine
    } else {
        document.body.classList.remove('dark-mode');
    }
}

function loadThemePreference() {
    // Check if user has a preference, otherwise default to light
    const storedTheme = localStorage.getItem(STORAGE_KEY);
    applyTheme(storedTheme || 'light'); 
}

function toggleTheme() {
    const currentTheme = document.body.classList.contains('dark-mode') ? 'dark' : 'light';
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';

    localStorage.setItem(STORAGE_KEY, newTheme);
    applyTheme(newTheme);
}

// Apply theme immediately on page load
loadThemePreference();


================================================================================
File: .\templates\add_movie.html
================================================================================

<!DOCTYPE html>
<html>
<head>
    <title>Add Movie</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
<h1>Add Movie</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
<!-- Must add enctype="multipart/form-data" for file uploads -->
<form method="POST" enctype="multipart/form-data">
  <label>Movie Title:</label>
  <input type="text" name="title" required><br><br>
  
  <label>Movie Poster (Optional):</label>
  <input type="file" name="poster" accept="image/*"><br><br>
  
  <button type="submit">Add</button>
</form>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_add_showtime.html
================================================================================

<!DOCTYPE html>
<html>
<head><title>Add Showtime</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head>
<body>
<h1>Add Showtime</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
<form method="POST">
    <label>Movie:</label>
    <select name="movie_id" required>
        {% for movie in movies %}
            <option value="{{ movie.id }}">{{ movie.title }}</option>
        {% endfor %}
    </select><br><br>
    
    <label>Date:</label>
    <input type="date" name="show_date" required><br><br>
    
    <label>Time:</label>
    <input type="time" name="show_time_only" required><br><br>
    
    <button type="submit">Add Showtime</button>
</form>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_bookings.html
================================================================================

<!DOCTYPE html>
<html>
<head><title>All Bookings</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head>
<body>
<h1>All Bookings</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
<table border="1">
<tr><th>Ticket ID</th><th>Name</th><th>Email</th><th>Movie</th><th>Time</th><th>Seat</th></tr>
{% for b in bookings %}
<tr>
<td>{{ b.ticket_id }}</td>
<td>{{ b.username }}</td>
<td>{{ b.email }}</td>
<td>{{ b.title }}</td>
<td>{{ b.show_time }}</td>
<td>{{ b.seat_no }}</td>
</tr>
{% endfor %}
</table>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_dashboard.html
================================================================================

<!DOCTYPE html>
<html>
<head>
  <title>Admin Dashboard</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
<h1>Admin Dashboard</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
<ul>
  <li><a href="/admin/add_movie?password=admin123">Add Movie</a></li>
  <li><a href="/admin/add_showtime?password=admin123">Add Showtime</a></li>
  <li><a href="/admin/edit_movie?password=admin123">Edit Movie Details</a></li> 
  <li><a href="/admin/bookings?password=admin123">View All Bookings</a></li>
  <hr>
  <li><a href="/admin/remove_movie?password=admin123">Remove Movie</a></li>
  <li><a href="/admin/remove_showtime?password=admin123">Remove Showtime</a></li>
  <hr>
  <li><a href="/admin/stats?password=admin123">View Statistics</a></li>
</ul>


<a href="/">Logout</a>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_edit_movie.html
================================================================================

<!DOCTYPE html>
<html>
<head>
    <title>Edit Movie: {{ movie.title }}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
<h1>Edit Movie: {{ movie.title }}</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
<!-- Must add enctype="multipart/form-data" for file uploads -->
<form method="POST" enctype="multipart/form-data">
    <label>Movie Title:</label>
    <input type="text" name="title" value="{{ movie.title }}" required><br><br>
    
    <label>Current Poster:</label>
    <div>
        {% if movie.poster_url %}
            <img src="{{ url_for('static', filename=movie.poster_url.replace('static/', '')) }}" alt="{{ movie.title }}" style="max-height: 100px;"><br>
            <small>Upload a new file to replace the current one.</small>
        {% else %}
            <p>(No current poster)</p>
        {% endif %}
    </div><br>

    <label>Change Poster (Optional):</label>
    <input type="file" name="poster" accept="image/*"><br><br>
    
    <button type="submit">Save Changes</button>
</form>

<p><a href="/admin/edit_movie?password={{ request.args.get('password') }}">Back to Movie List</a></p>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_edit_movie_list.html
================================================================================

<!DOCTYPE html>
<html>
<head>
    <title>Edit Movies</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
<h1>Select Movie to Edit</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
{% with messages = get_flashed_messages() %}
 {% if messages %}
  <ul class="flash-message">
   {% for msg in messages %}
    <li>{{ msg }}</li>
   {% endfor %}
  </ul>
 {% endif %}
{% endwith %}

{% if movies %}
    <table border="1">
        <tr><th>Title</th><th>Poster</th><th>Action</th></tr>
        {% for movie in movies %}
        <tr>
            <td>{{ movie.title }}</td>
            <td>
                {% if movie.poster_url %}
                    <img src="{{ url_for('static', filename=movie.poster_url.replace('static/', '')) }}" alt="{{ movie.title }}" style="max-height: 50px;">
                {% else %}
                    (None)
                {% endif %}
            </td>
            <td>
                <a href="/admin/edit_movie/{{ movie.id }}?password={{ request.args.get('password') }}">Edit Details</a>
            </td>
        </tr>
        {% endfor %}
    </table>
{% else %}
    <p>No movies found to edit.</p>
{% endif %}

<p><a href="/admin/dashboard">Back to Dashboard</a></p>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_remove_movie.html
================================================================================

<!DOCTYPE html>
<html>
<head><title>Remove Movie</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head>
<body>
<h1>Remove Movie</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
{% with messages = get_flashed_messages() %}
 {% if messages %}
  <ul style="color:green;">
   {% for msg in messages %}
    <li>{{ msg }}</li>
   {% endfor %}
  </ul>
 {% endif %}
{% endwith %}

{% if movies %}
    <table border="1">
        <tr><th>Movie Title</th><th>Action</th></tr>
        {% for movie in movies %}
        <tr>
            <td>{{ movie.title }}</td>
            <td>
                <form method="POST" onsubmit="return confirm('WARNING: Deleting this movie will DELETE ALL its showtimes, seats, and bookings. Are you sure?');">
                    <input type="hidden" name="movie_id" value="{{ movie.id }}">
                    <button type="submit">Remove Movie</button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </table>
{% else %}
    <p>No movies currently available.</p>
{% endif %}

<p><a href="/admin/dashboard">Back to Dashboard</a></p>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_remove_showtime.html
================================================================================

<!DOCTYPE html>
<html>
<head><title>Remove Showtime</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head>
<body>
<h1>Remove Showtime</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
{% with messages = get_flashed_messages() %}
 {% if messages %}
  <ul style="color:green;">
   {% for msg in messages %}
    <li>{{ msg }}</li>
   {% endfor %}
  </ul>
 {% endif %}
{% endwith %}

{% if showtimes %}
    <table border="1">
        <tr><th>Movie</th><th>Showtime</th><th>Action</th></tr>
        {% for st in showtimes %}
        <tr>
            <td>{{ st.title }}</td>
            <td>{{ st.show_time }}</td>
            <td>
                <form method="POST" onsubmit="return confirm('Are you sure you want to delete this showtime? All associated bookings and seats will be lost!');">
                    <input type="hidden" name="showtime_id" value="{{ st.id }}">
                    <button type="submit">Remove</button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </table>
{% else %}
    <p>No showtimes currently available.</p>
{% endif %}

<p><a href="/admin/dashboard">Back to Dashboard</a></p>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\admin_stats.html
================================================================================

<!DOCTYPE html>
<html>
<head><title>Admin Statistics</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head>
<body>
<h1>System Statistics</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
<h2>Overall Data</h2>
<ul>
    <li>Total Movies Listed: <b>{{ stats.total_movies }}</b></li>
    <li>Total Bookings Made: <b>{{ stats.total_bookings }}</b></li>
    <li>Total Seats Unbooked (Across all current showtimes): <b>{{ stats.unbooked_seats }}</b></li>
</ul>

<h2>Top 5 Most Popular Showtimes</h2>
{% if stats.top_showtimes %}
    <table border="1">
        <tr><th>Movie</th><th>Time</th><th>Bookings</th></tr>
        {% for showtime in stats.top_showtimes %}
        <tr>
            <td>{{ showtime.title }}</td>
            <td>{{ showtime.show_time }}</td>
            <td>{{ showtime.booking_count }}</td>
        </tr>
        {% endfor %}
    </table>
{% else %}
    <p>No bookings data available yet to calculate popularity.</p>
{% endif %}

<p><a href="/admin/dashboard">Back to Dashboard</a></p>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\book.html
================================================================================

<!DOCTYPE html>
<html>
<head><title>Book Seat</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head>
<body>
  <!-- movie variable now holds showtime data -->
  <h1>Book {{ seat.seat_no }} for {{ movie.title }} ({{ movie.show_time }})</h1>
  <button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
  <form method="POST">
    <label>Name:</label><input type="text" name="username" required><br>
    <label>Email:</label><input type="email" name="email" required><br>
    <button type="submit">Confirm Booking</button>
  </form>
  <script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\index.html
================================================================================

<!DOCTYPE html>
<html>
<head>
  <title>Movie Booking</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
<h1>Movie Booking</h1>
<button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
<h2>Available Movies</h2>

{% with messages = get_flashed_messages() %}
 {% if messages %}
  <ul class="flash-message">
   {% for msg in messages %}
    <li>{{ msg }}</li>
   {% endfor %}
  </ul>
 {% endif %}
{% endwith %}

<div class="movie-grid">
{% for movie in movies %}
  <div class="movie-card">
    
    <!-- Poster acts as the main link to select showtimes -->
    <a href="/timings/{{ movie.id }}" class="poster-link">
        {% if movie.poster_url %}
            <!-- Use the uploaded image -->
            <!-- Note: We use .replace('static/', '') because url_for('static', filename=...) automatically prefixes 'static/' -->
            <img src="{{ url_for('static', filename=movie.poster_url.replace('static/', '')) }}" alt="{{ movie.title }}" class="poster-placeholder" style="background: none; object-fit: cover;">
        {% else %}
            <!-- Use the placeholder div -->
            <div class="poster-placeholder">
                {{ movie.title }} Poster Placeholder
            </div>
        {% endif %}
    </a>
    
    <div class="movie-info">
        <h3>{{ movie.title }}</h3>
        <a href="/timings/{{ movie.id }}">Select Showtime</a>
    </div>
  </div>
{% endfor %}
</div>
<div class="admin-section">
    <hr>
    <h2>Admin Panel</h2>
    <form method="POST">
      <input type="password" name="admin_password" placeholder="Enter admin password" required>
      <button type="submit">Login as Admin</button>
    </form>
</div>
<script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>




================================================================================
File: .\templates\seats.html
================================================================================

<!DOCTYPE html>
<html>
<head>
  <title>Seats</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
  <style>
    .seat { display: inline-block; width: 40px; height: 40px; margin: 5px; text-align: center; line-height: 40px; border: 1px solid black; cursor: pointer; }
    .booked { background-color: red; color: white; cursor: not-allowed; }
    .available { background-color: lightgreen; }
  </style>
</head>
<body>
  <h1>Seats for {{ showtime.title }} ({{ showtime.show_time }})</h1>
  <button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
  <div>
  {% for seat in seats %}
    <div class="seat {% if seat.is_booked %}booked{% else %}available{% endif %}">
      {% if seat.is_booked %}
        {{ seat.seat_no }}
      {% else %}
        <!-- Link now uses showtime ID and the specific seat ID -->
        <a href="/book/{{ showtime.id }}/{{ seat.id }}">{{ seat.seat_no }}</a>
      {% endif %}
    </div>
    {% if loop.index % 5 == 0 %}<br>{% endif %}
  {% endfor %}
  </div>
  <script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>


================================================================================
File: .\templates\ticket.html
================================================================================

<!DOCTYPE html>
<html>
<head>
  <title>Ticket</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
  <h1>🎟 Your Ticket</h1>
  <button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
  <p><b>Ticket ID:</b> {{ booking.ticket_id }}</p>
  <p><b>Name:</b> {{ booking.username }}</p>
  <p><b>Email:</b> {{ booking.email }}</p>
  <p><b>Movie:</b> {{ booking.title }}</p>
  <p><b>Time:</b> {{ booking.show_time }}</p>
  <p><b>Seat:</b> {{ booking.seat_no }}</p>
  <script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>




================================================================================
File: .\templates\timings.html
================================================================================

<!DOCTYPE html>
<html>
<head><title>Showtimes for {{ movie.title }}</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head>
<body>
    <h1>Showtimes for {{ movie.title }}</h1>
    <button onclick="toggleTheme()" style="float: right;">Toggle Theme</button>
    {% if showtimes %}
        <ul>
        {% for time in showtimes %}
            <!-- Link to seats now uses showtime ID -->
            <li>{{ time.show_time }} - <a href="/seats/{{ time.id }}">View Seats</a></li>
        {% endfor %}
        </ul>
    {% else %}
        <p>No showtimes available for this movie yet.</p>
    {% endif %}
    
    <p><a href="/">Back to Movies</a></p>
    <script src="{{ url_for('static', filename='theme_toggle.js') }}"></script>
</body>
</html>

